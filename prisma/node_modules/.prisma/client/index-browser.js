
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.11.0
 * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
 */
Prisma.prismaVersion = {
  client: "3.11.0",
  engine: "b371888aaf8f51357c7457d836b86d12da91658b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  oauth_token_secret: 'oauth_token_secret',
  oauth_token: 'oauth_token'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  role: 'role',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image'
});

exports.Prisma.VerificationTokenScalarFieldEnum = makeEnum({
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
});

exports.Prisma.CourseScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  instructor_id: 'instructor_id',
  course_title: 'course_title',
  updated_at: 'updated_at',
  author: 'author'
});

exports.Prisma.EnrollmentScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  student_id: 'student_id',
  course_id: 'course_id',
  current_grade_level: 'current_grade_level'
});

exports.Prisma.InstructorScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id'
});

exports.Prisma.LessonScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  author: 'author',
  lesson_module: 'lesson_module'
});

exports.Prisma.ModuleScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  author: 'author',
  module_subject_id: 'module_subject_id',
  module_name: 'module_name'
});

exports.Prisma.Question_topicScalarFieldEnum = makeEnum({
  id: 'id',
  topic_id: 'topic_id',
  question_id: 'question_id'
});

exports.Prisma.TopicScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  question_topic_name: 'question_topic_name'
});

exports.Prisma.QuestionScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  difficulty: 'difficulty',
  image_url: 'image_url',
  equation: 'equation',
  question_text: 'question_text',
  answer_formula: 'answer_formula',
  updated_at: 'updated_at',
  author: 'author'
});

exports.Prisma.Quiz_attemptScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  student_id: 'student_id',
  quiz_id: 'quiz_id',
  total_points: 'total_points',
  points_scored: 'points_scored',
  enroll_id: 'enroll_id',
  answer_data: 'answer_data',
  question_answered_count: 'question_answered_count',
  question_unanswered_count: 'question_unanswered_count'
});

exports.Prisma.Quiz_questionScalarFieldEnum = makeEnum({
  created_at: 'created_at',
  quiz_id: 'quiz_id',
  question_id: 'question_id',
  question_number: 'question_number'
});

exports.Prisma.QuizScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  author: 'author'
});

exports.Prisma.Student_moduleScalarFieldEnum = makeEnum({
  student_id: 'student_id',
  module_id: 'module_id',
  time_started: 'time_started'
});

exports.Prisma.StudentScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  grade_at_account_creation: 'grade_at_account_creation',
  user_id: 'user_id'
});

exports.Prisma.SubjectScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.Role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN',
  INSTRUCTOR: 'INSTRUCTOR',
  STUDENT: 'STUDENT'
});

exports.Prisma.ModelName = makeEnum({
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  course: 'course',
  enrollment: 'enrollment',
  instructor: 'instructor',
  lesson: 'lesson',
  module: 'module',
  question_topic: 'question_topic',
  topic: 'topic',
  question: 'question',
  quiz_attempt: 'quiz_attempt',
  quiz_question: 'quiz_question',
  quiz: 'quiz',
  student_module: 'student_module',
  student: 'student',
  subject: 'subject'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
  STUDENT
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  role          Role         @default(USER)  
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  instructor    instructor[]
  student       student[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model course {
  id            String       @id @default(cuid())
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  instructor_id String?
  course_title  String       @db.VarChar
  updated_at    DateTime?    @db.Timestamptz(6)
  author        String?
  enrollment    enrollment[]
}

model enrollment {
  id                  String         @id @default(cuid())
  created_at          DateTime?      @default(now()) @db.Timestamptz(6)
  student_id          String?
  course_id           String?
  current_grade_level String?
  course              course?        @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student             student?       @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quiz_attempt        quiz_attempt[]
}

model instructor {
  id         String    @id @default(cuid())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  user_id    String?
  User       User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lesson {
  id            String    @id @default(cuid())
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  author        String?
  lesson_module String?
  module        module?   @relation(fields: [lesson_module], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model module {
  id                String           @id(map: "Module_pkey") @default(cuid())
  created_at        DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?        @db.Timestamptz(6)
  author            String?
  module_subject_id String?
  module_name       String           @unique @db.VarChar
  subject           subject?         @relation(fields: [module_subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lesson            lesson[]
  student_module    student_module[]
}

model question_topic {
  id          String    @id @default(cuid())
  topic_id    String
  question_id String?
  question    question? @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  topic       topic     @relation(fields: [topic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model topic {
  id                  String           @id @default(cuid())
  created_at          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?        @db.Timestamptz(6)
  question_topic_name String           @map("question-topic-name") @db.VarChar
  question_topic      question_topic[]
}

model question {
  id             String           @id @default(cuid())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  difficulty     Int?
  image_url      String?          @db.VarChar
  equation       String?          @db.VarChar
  question_text  String?          @db.VarChar
  answer_formula String?          @db.VarChar
  updated_at     DateTime?        @db.Timestamptz(6)
  author         String?          @db.VarChar
  question_topic question_topic[]
}

model quiz_attempt {
  id                        String      @id @default(cuid())
  created_at                DateTime?   @default(now()) @db.Timestamptz(6)
  student_id                String
  quiz_id                   String
  total_points              Int?
  points_scored             Int?
  enroll_id                 String?
  answer_data               Json?       @db.Json
  question_answered_count   Int?
  question_unanswered_count Int?
  enrollment                enrollment? @relation(fields: [enroll_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quiz                      quiz        @relation(fields: [quiz_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student                   student     @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model quiz_question {
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  quiz_id         String
  question_id     String
  question_number Int?
  quiz            quiz      @relation(fields: [quiz_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([quiz_id, question_id]) 
}

model quiz {
  id            String          @id @default(cuid())
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  author        String?
  attempts      quiz_attempt[]
  questions     quiz_question[]
}

model student_module {
  student_id   String
  module_id    String
  time_started DateTime @default(now()) @db.Timestamptz(6)
  module       module   @relation(fields: [module_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student      student  @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([student_id, module_id])
}

model student {
  id                        String           @id @default(cuid())
  created_at                DateTime?        @default(now()) @db.Timestamptz(6)
  grade_at_account_creation Int?
  user_id                   String?
  User                      User?            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enrollment                enrollment[]
  quiz_attempt              quiz_attempt[]
  student_module            student_module[]
}

model subject {
  id         String    @id @default(cuid())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  module     module[]
}

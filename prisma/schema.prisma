generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
  STUDENT
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  role          Role         @default(USER)
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  instructor    Instructor[]
  student       Student?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id            String       @id @default(cuid())
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt
  instructor_id String?
  course_title  String       @unique
  author        String?
  enrollment    Enrollment[]
}

model Enrollment {
  id                  String        @id @default(cuid())
  created_at          DateTime      @default(now())
  updated_at          DateTime?     @updatedAt
  student_id          String?
  course_id           String?
  current_grade_level String?
  course              Course?       @relation(fields: [course_id], references: [id], onDelete: Cascade)
  student             Student?      @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

model Instructor {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  user_id    String?
  User       User?     @relation(fields: [user_id], references: [id])
}

model Lesson {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  author     String?
  module_id  String?
  module     Module?   @relation(fields: [module_id], references: [id])
}

model Module {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt
  author            String?
  module_name       String    @unique
  subject           Subject?  @relation(fields: [module_subject_id], references: [id])
  module_subject_id String?
  lesson            Lesson[]
  quiz              Quiz[]
}

model TopicCategory {
  id                   String    @id @default(cuid())
  created_at           DateTime  @default(now())
  updated_at           DateTime? @updatedAt
  topic_category_title String    @unique
  topics               Topic[]
}

model Topic {
  id             String          @id @default(cuid())
  created_at     DateTime        @default(now())
  updated_at     DateTime?       @updatedAt
  topic_title    String          @unique
  topic_category TopicCategory[]
  questions      Question[]
}

model Question {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt
  difficulty     Int?
  image_url      String?
  equation       String?
  question_text  String?
  answer_formula String?
  author         String?
  topics         Topic[]
  quizzes        Quiz[]
}

model QuizAttempt {
  id                        String      @id @default(cuid())
  created_at                DateTime    @default(now())
  total_points              Int?
  points_scored             Int?
  enroll_id                 String?
  answer_data               Json?       @db.Json
  question_answered_count   Int?
  question_unanswered_count Int?
  quiz                      Quiz        @relation(fields: [quiz_id], references: [id])
  quiz_id                   String
  student                   Student     @relation(fields: [student_id], references: [id])
  student_id                String
}

model Quiz {
  id         String        @id @default(cuid())
  created_at DateTime      @default(now())
  updated_at DateTime?     @updatedAt
  author     String?
  attempts   QuizAttempt[]
  questions  Question[]
  modules    Module[]
}

model Student {
  id                        String        @id @default(cuid())
  created_at                DateTime      @default(now())
  updated_at                DateTime?     @updatedAt
  grade_at_account_creation Int?
  user_id                   String        @unique
  user                      User          @relation(fields: [user_id], references: [id], onDelete: SetNull)
  enrollments               Enrollment[]
  quiz_attempts             QuizAttempt[]
}

model Subject {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  modules Module[]
}
